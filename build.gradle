import javax.tools.ToolProvider

plugins {
    id "java"
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.palantir.git-version' version '0.5.1' //version helper
}

wrapper {
    gradleVersion = '7.4.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.broadinstitute'

final isRelease = Boolean.getBoolean("release")
version = (isRelease ? gitVersion() : gitVersion() + "-SNAPSHOT").replaceAll(".dirty", "")

repositories {
    mavenCentral()
    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot/" //for Broad snapshots
    }

    mavenLocal()
}

jacocoTestReport {
    doFirst {
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    }
    dependsOn test
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true // codecov plugin depends on xml format report
        html.enabled = true
    }
}

compileJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}
compileTestJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}
dependencies {
    implementation 'net.sf.jopt-simple:jopt-simple:5.0.3'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.15.0'

    // Get the jdk files we need to run javaDoc. We need to use these during compile, testCompile,
    // test execution, and gatkDoc generation, but we don't want them as part of the runtime
    // classpath and we don't want to redistribute them in the uber jar.
    final javadocJDKFiles = files(((URLClassLoader) ToolProvider.getSystemToolClassLoader()).getURLs())
    compileOnly(javadocJDKFiles)
    testImplementation(javadocJDKFiles)
    implementation 'org.freemarker:freemarker:2.3.30'
    implementation 'com.google.code.gson:gson:2.2.2'

    testImplementation 'org.testng:testng:6.9.6'
    testImplementation 'org.mockito:mockito-core:2.10.0'
}

test {
    useTestNG()
    outputs.upToDateWhen { false }  //tests will never be "up to date" so you can always rerun them

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("Running Test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// This is a hack to disable the java 8 default javadoc lint until we fix the html formatting
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

/**
 *This specifies what artifacts will be built and uploaded when performing a maven upload.
 */
artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

/**
 * Sign non-snapshot releases with our secret key.  This should never need to be invoked directly.
 */
signing {
    required { isRelease && gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

def basePomConfiguration = {
    packaging = 'jar'
    description = 'Barclay command line parsing and documentation utilities'
    url = 'http://github.com/broadinstitute/barclay'

    developers {
        developer {
            id = 'gatkdev'
            name = 'GATK Development Team'
            email = 'gatk-dev-public@broadinstitute.org'
        }
    }

    scm {
        url 'scm:git@github.com:broadinstitute/barclay.git'
        connection 'scm:git@github.com:broadinstitute/barclay.git'
        developerConnection 'scm:git@github.com:broadinstitute/barclay.git'
    }

    licenses {
        license {
            name = 'BSD 3-Clause'
            url = 'https://github.com/broadinstitute/barclay/blob/master/LICENSE.TXT'
            distribution = 'repo'
        }
    }
}

/**
 * Upload a release to sonatype.  You must be an authorized uploader and have your sonatype
 * username and password information in your gradle properties file.  See the readme for more info.
 *
 * For releasing to your local maven repo, use gradle install
 */
publishing {
    publications {
        barclay(MavenPublication) {
            from components.java
            artifactId = "barclay"
            pom { basePomConfiguration}
            pom.name = "Barclay"

            artifact javadocJar
            artifact sourcesJar
        }
    }

    repositories {
        maven {
            name = isRelease ? "SonaType" : "Artifactory"
            url =  isRelease ? "https://oss.sonatype.org/service/local/staging/deploy/maven2/" : "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/"
            credentials {
                username = isRelease ? project.findProperty("sonatypeUsername") : System.env.ARTIFACTORY_USERNAME
                password = isRelease ? project.findProperty("sonatypePassword") : System.env.ARTIFACTORY_PASSWORD
            }
        }
    }
}


